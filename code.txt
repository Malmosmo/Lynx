precision highp float;

uniform float iFrame;
uniform vec2 iResolution;

mat3 rotX(float a ) {
        float c = cos( a );
        float s = sin( a );
        return mat3(1.0, 0.0, 0.0, 0.0, c, -s,0.0, s, c );
    }

mat3 rotY(float a ) {
        float c = cos( a );
        float s = sin( a );
        return mat3(c, 0.0, s, 0.0, 1.0, 0.0, -s, 0.0,c );
    }


vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x*34.0)+10.0)*x);
}

float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626,  // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

float sdSphere( in vec3 p, in float r )
{
    return length(p)-r;
}

float sdRoundBox( vec3 p, vec3 b, float r )
{
  vec3 d = abs(p) - b;
  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)) - r;
}

float cumNoise(vec2 p) {
    float cum = 0.0;
    for(int i = 0; i < 10; i++) {
        cum += pow(2.0,-float(i)) * snoise(pow(2.0,float(i)) * p);
    }
    
    return cum;
}

float map(in vec3 pos) {
    float d = 1e10;
    vec3 q = rotY(iFrame*0.001) *rotX(iFrame*0.001) * pos;
    // q.y -= iFrame / 1000.0;
    float d1 = sdRoundBox(q,vec3(1.8), 0.1 );
    //d1 += 0.1 * (2.0 * rand(0.0001 * q.xy) - 1.0);
    return min(d, d1);
}

vec3 calcNormal( in vec3 pos )
{
    const float ep = 0.0001;
    vec2 e = vec2(1.0,-1.0)*0.5773;
    return normalize( e.xyy*map( pos + e.xyy*ep ) + 
					  e.yyx*map( pos + e.yyx*ep ) + 
					  e.yxy*map( pos + e.yxy*ep ) + 
					  e.xxx*map( pos + e.xxx*ep ) );
}

vec3 rayMarcher(vec2 pos) {
    vec2 p = (-iResolution.xy + 2.0*pos)/iResolution.y;

    vec3 ro = vec3(0.0,4.0,8.0);
    vec3 rd = normalize(vec3(p-vec2(0.0,1.8),-3.5));
    
    float t = 7.0;
	for(int i = 0; i < 64; i++) {
		vec3 p = ro + t*rd;
		float h = map(p);
		if(abs(h) < 0.001 || t > 11.0 ) break;
        t += h;
	}
	vec3 col = vec3(0.0);
    if( t<11.0 ) {
		vec3 pos = ro + t*rd;
		vec3 nor = calcNormal(pos);
        vec3  lig = normalize(vec3(0.0,1.0,1.0));
        float dif = clamp(dot(nor,lig),0.0,1.0);
        
        // col = vec3(1.00,p.y,0.80)*dif;
        col = nor;
    }
    col = sqrt( col );
    
    return col;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
    // Normalized pixel coordinates (from 0 to 1)
    // vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    vec3 col = rayMarcher(fragCoord);

    // Output to screen
    fragColor = vec4(col,1.0);
}

void main()  {
    gl_FragColor.w = 1.0;
    mainImage(gl_FragColor, gl_FragCoord.xy);
}