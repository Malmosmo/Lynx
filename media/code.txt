precision highp float;

uniform float iFrame;
uniform vec2 iResolution;

mat3 rotX(float a ) {
        float c = cos( a );
        float s = sin( a );
        return mat3(1.0, 0.0, 0.0, 0.0, c, -s,0.0, s, c );
    }

mat3 rotY(float a ) {
        float c = cos( a );
        float s = sin( a );
        return mat3(c, 0.0, s, 0.0, 1.0, 0.0, -s, 0.0,c );
    }

float sdRoundBox( vec3 p, vec3 b, float r )
{
  vec3 d = abs(p) - b;
  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)) - r;
}

float sdSphere(vec3 p, float r) {
    return length(p) - r;
}

float map(in vec3 pos) {
    float d = 1e10;
    
    vec3 q = pos;
    // vec3 q = rotY(iFrame*0.001) *rotX(iFrame*0.001) * pos;
    // q.y -= iFrame / 1000.0;
    float d1 = sdSphere(q, 1.0);
    //d1 += 0.1 * (2.0 * rand(0.0001 * q.xy) - 1.0);
    return min(d, d1);
}

vec3 calcNormal( in vec3 pos )
{
    const float ep = 0.0001;
    vec2 e = vec2(1.0,-1.0)*0.5773;
    return normalize( e.xyy*map( pos + e.xyy*ep ) + 
					  e.yyx*map( pos + e.yyx*ep ) + 
					  e.yxy*map( pos + e.yxy*ep ) + 
					  e.xxx*map( pos + e.xxx*ep ) );
}

vec3 rayMarcher(vec2 pos) {
    vec2 uv = pos.xy / iResolution.xy;
    
    float aspect = iResolution.y / iResolution.x;
    
    vec3 origin = vec3(0.0, 0.0, -5.0);
    vec3 ray = vec3( uv.x - 0.5, (uv.y - 0.5) * aspect, 0.5 );
    
    float t = 0.0;
	for(int i = 0; i < 64; i++) {
		vec3 p = origin + t * ray;
		float dist = map(p);
		if(abs(dist) < 0.001 || dist > 1000.0 ) break;
        t += dist;
	}
    
	vec3 col = vec3(ray);
    if( t < 1000.0 ) {
		vec3 pos = origin + t * ray;
		vec3 nor = calcNormal(pos);
        vec3  lig = normalize(vec3(1.0,1.0,-1.0));
        float dif = clamp(dot(nor,lig),0.0,1.0);
        
        col = vec3(1.00,0.2,0.80)*dif;
        // col = nor;
        
        //col = vec3(1.0, 0.0, 1.0);
    }
    
    col = sqrt( col );
    
    return col;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
    // Normalized pixel coordinates (from 0 to 1)
    // vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    vec3 col = rayMarcher(fragCoord);

    // Output to screen
    fragColor = vec4(col, 1.0);
}

void main()  {
    gl_FragColor.w = 1.0;
    mainImage(gl_FragColor, gl_FragCoord.xy);
}